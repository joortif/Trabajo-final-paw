/** * El script crea un objeto (llamado cambiadorCss) que proporciona una serie de  * métodos para gestionar hojas de estilos CSS en la página que lo incluya. *  * El script permitirá cambiar la hoja de estilos activa.  *  * Para ello se deben incluir en la página varios elementos link para CSS, con  * las siguientes restricciones: * - Solo se gestionarán los lincks CSS que tengan un atributo "title". El valor  *   de este atributo no puede repetirse entre los diferentes links * - El resto de elementos link CSS (sin title) no se gestionan ý permanencen *   habilitados en la página * - Uno de los links CSS gestionados corresponderá a la hoja de estilos por  *   defecto. Este link se distingue del resto porque en su atributo "rel" no  *   aparece la palabra "alternate". El resto de elementos link CSS gestionados  *   deben tener la palabra "alternate" en su atributo "rel". *    * La elección de la hoja de estilos se hace mediante el método "setHojaCss" del * objecto cambiadorCss. P.ej: *   cambiadorCss.setHojaCss("... title de un elemento link css de la página ...") * Si el valor del argumento entregado al método .setHojaCss no correspondiese * con ninguno de los valores de title de los links css gestionados, se escribe * un mensaje de error en la consola del navegador. *  * Otros métodos del objeto cambiadorCss: * - getManagedCss: devuelve un array con los titles de las hojas css que se  *                  pueden conmutar * - getCssActivo:  devuelve el title del link css activo * - getDefaultCss: devuelve el title del link css de la hoja de estilos por  *                  defecto (el link que no tiene la palabra "alternate" en su  *                  atributo "rel") *                   * NOTA: Para conservar la hoja de estilo entre diferentes recargas de la página *       se usa una cookie llamada cambiadorCssCookie, con un tiempo de  *       expiración de un día */var cambiadorCss = (function () {  const defConfig = {    cookie: {      name: 'cambiadorCssCookie',      daysOfLife: 1    }  }  var defaultCss;  var cssActivo;  var cssLinksObj = {}  function init() {    Array      .from(document.getElementsByTagName("link"))      .forEach(l => {        if (l.rel && l.rel.indexOf("style") !== -1 && l.title) {          cssLinksObj[l.title] = l          l.disabled = true;          if (l.rel.indexOf("alternate") === -1)            defaultCss = l.title;        }      });    var cookie = readCookie(defConfig.cookie.name);    cssActivo = getDefaultCss();    setHojaCss(cookie ? cookie : cssActivo);    window.console.log("StyleSwitcher inicializado");  }  function setHojaCss(title) {    if (title in cssLinksObj) {      cssLinksObj[cssActivo].disabled = true;      cssLinksObj[title].disabled = false;      cssActivo = title;    } else {      console.error(`La hoja de estilos ${title} no existe`)    }  }  function getCssActivo() {    return cssActivo;  }  function getDefaultCss() {    return defaultCss;  }    function getManagedCss() {    return Object.getOwnPropertyNames(cssLinksObj);  }  function createCookie(name, value, days) {    if (days) {      var date = new Date();      date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));      var expires = "; expires=" + date.toGMTString();    } else      expires = "";    document.cookie = name + "=" + value + expires + "; path=/";  }  function readCookie(name) {    var nameEQ = name + "=";    var ca = document.cookie.split(';');    for (var i = 0; i < ca.length; i++) {      var c = ca[i];      while (c.charAt(0) === ' ')        c = c.substring(1, c.length);      if (c.indexOf(nameEQ) === 0)        return c.substring(nameEQ.length, c.length);    }    return null;  }  window.addEventListener('load', init)  window.addEventListener('unload', function (e) {    var title = getCssActivo();    createCookie(defConfig.cookie.name, title, defConfig.cookie.daysOfLife);  })    //window.onunload = function(e) {//  var title = getCssActivo();//  createCookie("style", title, 365);//}  return {    setHojaCss, getCssActivo, getDefaultCss, getManagedCss  }})()